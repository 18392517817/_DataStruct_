#pragma once

#include "HuffmanTree.h"
 
typedef long LongType;

//#define _DEBUG_

// 文件信息
struct FileInfo
{
	unsigned char _ch;		// 字符
	LongType _appearCount;	// 出现次数
	string _huffmanCode;	// 字符对应的huffman编码

	FileInfo(int appearCount = 0)
		:_ch(0)
		, _appearCount(appearCount)
	{}

	bool operator < (const FileInfo& info) const
	{
		return _appearCount < info._appearCount;
	}

	bool operator != (const FileInfo& info) const
	{
		return _appearCount != info._appearCount;
	}

	FileInfo operator +(const FileInfo& info)
	{
		FileInfo tmp;
		tmp._appearCount = _appearCount + info._appearCount;
		return tmp;

		//return FileInfo(_appearCount + info._appearCount);
	}
};

ostream& operator<<(ostream& os, const FileInfo& info)
{
	os << info._ch << ":" << info._appearCount;
	return os;
}

class FileCompress
{
private:
	FileInfo _fileInfos[256];
public:
	FileCompress()
	{
		for (int i = 0; i < 256; ++i)
		{
			_fileInfos[i]._ch = i;
		}
	}

	//读取文件一行
	bool ReadLine(FILE* fOut, string& line)
	{
		assert(fOut);

		char ch = fgetc(fOut);
		//空行
		if (ch == EOF)
			return false;

		while (ch != '\n' && ch != EOF)
		{
			line += ch;
			ch = fgetc(fOut);
		}

		return true;
	}

	void Compress(const char* fileName)
	{
		assert(fileName);
		long long charCount = 0;//文件总字符次数
		// 1.读取文件统计字符出现总共的次数。
		FILE* fOut = fopen(fileName, "rb");//以二进制流读
		char ch = fgetc(fOut);
		while (ch != EOF)
		{
			_fileInfos[(unsigned char)ch]._appearCount++;
			ch = fgetc(fOut);
			++charCount;
		}

		// 2.根据字符出现的次数构建Huffman树，并生成每个字符对应的Huffman编码
		HuffmanTree_P<FileInfo> tree;
		FileInfo invalid(0);
		tree.CreateHuffmanTree(_fileInfos, 256, invalid);

#ifdef _DEBUG_
		tree.LevelOrder();
#endif
		_GenerateHuffmanCode(tree.GetRootNode());
		cout << endl;

		string compressFileName = fileName;
		compressFileName += ".Compress";
		FILE* fIn = fopen(compressFileName.c_str(), "wb");

		// 3.将压缩编码写入压缩文件中
		fseek(fOut, 0, SEEK_SET);//从头开始读取
		ch = fgetc(fOut);
		int pos = 0;
		char value = 0;
		while (ch != EOF)
		{
			string& code = _fileInfos[(unsigned char)ch]._huffmanCode;
#ifdef _DEBUG_
			cout << code << "->";
#endif
			//
			for (size_t i = 0; i < code.size(); ++i)
			{
				value <<= 1;

				if (code[i] == '1')
				{
					value |= 1;
				}

				if (++pos == 8)
				{
					fputc(value, fIn);
					pos = 0;
					value = 0;
				}
			}

			ch = fgetc(fOut);
		}

		if (pos)
		{
			value <<= (8 - pos);
			fputc(value, fIn);
		}

		cout << endl;

		// 4.将Huffman树的信息写入配置文件。
		string configFileName = fileName;
		configFileName += ".config";
		FILE* fInConfig = fopen(configFileName.c_str(), "wb");
		assert(fInConfig);
		string infoStr;
		char countStr[20];

		// 先写入字符个数
		_itoa(charCount >> 32, countStr, 10);
		fputs(countStr, fInConfig);
		fputc('\n', fInConfig);

		_itoa(charCount & 0xFFFFFFFF, countStr, 10);
		fputs(countStr, fInConfig);
		fputc('\n', fInConfig);

		for (int i = 0; i < 256; ++i)
		{
			if (_fileInfos[i] != invalid)
			{
				infoStr = _fileInfos[i]._ch;
				infoStr += ',';
				_itoa(_fileInfos[i]._appearCount, countStr, 10);
				infoStr += countStr;
				infoStr += '\n';

				fputs(infoStr.c_str(), fInConfig);
			}
		}

		fclose(fIn);
		fclose(fOut);
		fclose(fInConfig);
	}

	void Uncompress(const char* fileName)
	{
		// 1.读取配置文件中Huffman树的信息
		string configFileName = fileName;
		configFileName += ".config";
		FILE* fOutConfig = fopen(configFileName.c_str(), "rb");
		string line;
		char ch = 0;
		LongType appearCount = 0;

		// 读取文件的字符个数
		long long charCount = 0;
		ReadLine(fOutConfig, line);
		charCount = atoi(line.c_str());
		charCount <<= 32;
		ReadLine(fOutConfig, line);
		charCount += atoi(line.c_str());

		while (ReadLine(fOutConfig, line))
		{
			//
			// 若读到一个空行，则对应字符为换行符
			//
			if (!line.empty())
			{
				//sscanf(line.c_str(), "%s,%d", ch, appearCount);
				ch = line[0];
				_fileInfos[(unsigned char)ch]._appearCount = atoi(line.substr(2).c_str());
				line.clear();
			}
			else
			{
				line = '\n';
			}
		}

		// 2.根据读出的配置信息，重建Huffman树
		HuffmanTree_P<FileInfo> tree;
		FileInfo invalid(0);
		tree.CreateHuffmanTree(_fileInfos, 256, invalid);

#ifdef _DEBUG_
		tree.LevelOrder();
#endif
		HuffmanNode_P<FileInfo>* root = tree.GetRootNode();

		// 3. 读取压缩信息，根据重建的Huffman树解压缩
		string uncompressFileName = fileName;
		uncompressFileName += ".Uncompress";
		FILE* fIn = fopen(uncompressFileName.c_str(), "wb");

		string compressFileName = fileName;
		compressFileName += ".Compress";
		FILE* fOut = fopen(compressFileName.c_str(), "rb");

		// 4.根据压缩文件字符编码再Huffman树中寻找对应的字符
		int pos = 8;
		HuffmanNode_P<FileInfo>* cur = root;
		ch = fgetc(fOut);
		while (charCount > 0)
		{
			while (cur && cur->_left && cur->_right)
			{
				if (pos == 0)
				{
					pos = 8;
					ch = fgetc(fOut);
				}

				--pos;

				if (ch & 1 << pos)
				{
					cur = cur->_right;
#ifdef _DEBUG_
					cout << "1";
#endif
				}
				else
				{
					cur = cur->_left;
#ifdef _DEBUG_
					cout << "0";
#endif
				}
			}

			if (cur && charCount--)
			{
#ifdef _DEBUG_
				cout << "->";
#endif
				fputc(cur->_weight._ch, fIn);
				cur = root;
			}
		}

		cout << endl;

		fclose(fIn);
		fclose(fOut);
		fclose(fOutConfig);
	}
protected:
	void _GenerateHuffmanCode(HuffmanNode_P<FileInfo>* root)
	{
		if (root)
		{
			_GenerateHuffmanCode(root->_left);
			_GenerateHuffmanCode(root->_right);

			// 叶子节点则为编码节点，顺着叶子节点向上寻找Huffman编码
			if (root->_left == NULL && root->_right == NULL)
			{
				// code是_fileInfos数组中编码字符串对象的引用。
				string& code = _fileInfos[root->_weight._ch]._huffmanCode;

				HuffmanNode_P<FileInfo>* cur = root;
				HuffmanNode_P<FileInfo>* parent = root->_parent;
				while (parent)
				{
					if (parent->_left == cur)
					{
						code += '0';
					}
					else
					{
						code += '1';
					}

					cur = parent;
					parent = cur->_parent;
				}

				// 寻找编码是从叶子节点到根节点，所以要对编码进行逆置
				reverse(code.begin(), code.end());

			}
		}
	}

};
 
void TestCompress()
{
	FileCompress fc;
	int begin = GetTickCount();

	// 压缩
	fc.Compress("in.txt");

	int end = GetTickCount();
	cout << "Compress:" << end - begin << endl;

	begin = GetTickCount();

	// 解压缩
	//fc.Uncompress("Input");
	 fc.Uncompress("in.txt");

	end = GetTickCount();
	cout << "Compress:" << end - begin << endl;
}

#pragma once

#include "Heap.h"

/////////////////////////////////////////////////////////////////
// 动态结构

template<class T>
struct HuffmanNode_P
{
	T _weight;				// 权重				
	HuffmanNode_P* _parent;	// 父节点
	HuffmanNode_P* _left;	// 左孩子节点
	HuffmanNode_P* _right;	// 右孩子节点

	HuffmanNode_P(const T& weight)
		:_parent(NULL)
		, _left(NULL)
		, _right(NULL)
		, _weight(weight)
	{}
};

template<class T>
class HuffmanTree_P
{
private:
	HuffmanNode_P<T>* _root;
public:
	HuffmanTree_P()
		:_root(NULL)
	{}

	~HuffmanTree_P()
	{
		Destory(_root);
	}

	void Destory(HuffmanNode_P<T>*& root)
	{
		if (root)
		{
			Destory(root->_left);
			Destory(root->_right);

			delete root;
			root = NULL;
		}
	}

	HuffmanNode_P<T>* GetRootNode()
	{
		return _root;
	}

public:
	void CreateHuffmanTree(const T* array, size_t size, const T& invalid)
	{
		struct Compare
		{
			bool operator()(HuffmanNode_P<T>*& lhs, HuffmanNode_P<T>*& rhs)
			{
				return lhs->_weight < rhs->_weight;
			}
		};

		// 1.将所有值构建为节点放入到一个最小堆中，Compare仿函数做比较器
		Heap<HuffmanNode_P<T>*, Compare> minHeap;
		for (int i = 0; i < size; ++i)
		{
			if (array[i] != invalid)
			{
				HuffmanNode_P<T>* node = new HuffmanNode_P<T>(array[i]);
				minHeap.Push(node);
			}
		}

		if (minHeap.Empty())
			return;

		// 2.获取出最小和次小的节点做孩子节点，并构建这两个孩子节点的父节点进行链接。
		HuffmanNode_P<T>* parent = minHeap.GetTop();
		while (minHeap.Size() > 1)
		{
			HuffmanNode_P<T>* first = minHeap.GetTop();
			minHeap.Pop();
			HuffmanNode_P<T>* second = minHeap.GetTop();
			minHeap.Pop();

			parent = new HuffmanNode_P<T>(first->_weight + second->_weight);
			//构建父节点
			parent->_left = first;
			parent->_right = second;
			first->_parent = parent;
			second->_parent = parent;
			
			//如果插入权重重复， 
			minHeap.Push(parent);

		}

		_root = parent;
	}

	// 层次遍历打印二叉树
	void LevelOrder()
	{
		queue<HuffmanNode_P<T>* > q;
		if (_root)
		{
			q.push(_root);
		}

		while (!q.empty())
		{
			HuffmanNode_P<T>* node = q.front();
			cout << node->_weight << " ";

			if (node->_left)
			{
				q.push(node->_left);
			}

			if (node->_right)
			{
				q.push(node->_right);
			}
			q.pop();
		}

		cout << endl << endl;
	}


};

void TestHuffmanTree_P()
{
	int ar[] = { 2, 3, 6, 0, 4, 5, 1, 9, 7, 8 };
	//int ar[] = { 1,1,1,1,2,2 };
	HuffmanTree_P<int> tree;
	tree.CreateHuffmanTree(ar, sizeof(ar)/sizeof(int), -1);
	tree.LevelOrder();
}


//////////////////////////////////////////////////////////////////
// 静态存储结构

typedef int IndexType;

template<class T>
struct HuffmanNode_A
{
	T _weight;			// 权值
	IndexType _parent;	// 父节点
	IndexType _left;	// 左孩子
	IndexType _right;	// 右孩子
	IndexType _index;	// 下标

	HuffmanNode_A(const T& weight)
		:_weight(weight)
		, _left(-1)
		, _right(-1)
		, _parent(-1)
	{}
};

template<class T>
class HuffmanTree_A
{
public:
	void CreateHuffmanTree(const T* array, size_t size)
	{
		struct Compare
		{
			bool operator()(const HuffmanNode_A<T>* lhs, const HuffmanNode_A<T>* rhs)
			{
				return lhs->_weight < rhs->_weight;
			}
		};

		// 将节点的指针放入最小堆中，重写比较器
		_vNodes.reserve(size * 2 - 1);
		Heap<HuffmanNode_A<T>*, Compare> minHeap;
		size_t index = 0;
		for (; index < size; ++index)
		{
			_vNodes.push_back(HuffmanNode_A<T>(array[index]));
			HuffmanNode_A<T>& node = _vNodes.back();
			node._index = index;
			minHeap.Push(&node);
		}

		while (minHeap.Size() > 1)
		{
			HuffmanNode_A<T>* first = minHeap.GetTop();
			minHeap.Pop();
			HuffmanNode_A<T>* second = minHeap.GetTop();
			minHeap.Pop();

			_vNodes.push_back(HuffmanNode_A<T>(first->_weight + second->_weight));
			HuffmanNode_A<T>& parent = _vNodes.back();
			parent._index = index++;
			minHeap.Push(&parent);

			first->_parent = parent._index;
			second->_parent = parent._index;
			parent._left = first->_index;
			parent._right = second->_index;
		}

		_rootIndex = minHeap.GetTop()->_index;
	}

private:
	vector<HuffmanNode_A<T> > _vNodes;	// 静态存储结构
	IndexType _rootIndex;				// 根节点的下标
};

void TestHuffmanTree_A()
{
	int ar[10] = { 2, 3, 6, 0, 4, 5, 1, 9, 7, 8 };
	HuffmanTree_A<int> tree;
	tree.CreateHuffmanTree(ar, 10);
}


